///////////////////////////////////////////////////////////
Finalización del CRUD

	- Navegación 
    - CKEditor 
	- Relaciones (de entidades) y Middleware
	- Relaciones: 1:1, 1:N, N:M (Desplegables)


///////////////////////////////////////////////////////////


// Acceder al dashboard y loginearse 
http://<blog-app.test>/
http://<blog-app.test>/dashboard (bmesabater@gmail.com / 12345678) 

// Veamos la parte de los LAYOUT
// Ahora mismo, ya tenemos las pantalla del CRUD más o menos bonitas y con un diseño uniforme. 
//	ante cualquier cambio, recordar siempre compilar el css de tailwindcss

λ npm run dev (Durante el desarrollo)
λ npm run build (Antes de la subida a producción) 

// Vamos a crear los link para nuestro CRUD en el menú de opciones
// 	ahora mismo, para acceder, debemos tecleamos el enlace directamente.  
// Hay que incluir el código de los link en 
//	resources>views>layouts>navigation.blade.php

// Observar que hay el siguiente código al inicio, en la primera línea
<nav x-data="{ open: false }" class="bg-white border-b border-gray-100">

// Hay una variable 'open' que le asignamos el valor 'false' 
// Este 'open' se usa más abajo mismo código para (en Hamburger) 
	<button @click="open = ! open" class="inline-flex ...
		...
		<path :class="{'hidden': open, 'inline-flex': ! open }" ... 
		<path :class="{'hidden': ! open, 'inline-flex': open }" ... 

// El Hamburger, es el menú hamburguesa, el que aparece de manera responsiva cuando la página es más pequeña (probarlo)
// 	es el menú de tres línea.  
            <div class="-me-2 flex items-center sm:hidden">

// Vamos a poner los enlaces; habrá dos tipos de enlace:
// 	Cuando la página sea completa, que ocupa toda la pantalla y hay espacio para el menú normal
// 	Cuando la página sea minimizada, ocupa pantalla pequeña y se aplica el efecto responsivo
// El código es el siguiente:

// Identificar la ubicación de  <!-- Navigation Links --> dentro de navigation.blade.php
// Observar la estructura  <x-nav-link... recordar que esto es un Component, 
//	verlo en resources>views>components>nav-link.blade.php
// Confeccionar el siguiente código (con enlaces iniciales a la lista de items)

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        {{ __('Dashboard') }}
                    </x-nav-link>

                    <!-- Links para Publicaciones -->
                    <x-nav-link :href="route('postCRUD.index')" :active="request()->routeIs('postCRUD.index')">
                        {{ __('Publicaciones') }}
                    </x-nav-link>

                    <!-- Links para Categorias -->
                    <x-nav-link :href="route('categoryCRUD.index')" :active="request()->routeIs('categoryCRUD.index')">
                        {{ __('Categorias') }}
                    </x-nav-link>

                </div>

// Probarlo con 
http://blog-app.test/ (pulsar sobre dashboard o loginearse)
http://blog-app.test/dashboard

// Minimizar pantalla para comprobar como queda la responsividad-> Todavía no funciona, no hemos creado enlaces responsivos

// Y observar que en la cabezera, ahora aparecen las entradas; Dashboard / Publicaciones / Categorias
// Ir pulsando y podremos cambiar de pantalla, obviamente Publicaciones o Categorias 
//	te lleva a la primera página de la lista de Publicaciones o Categorias
// Fijarse también que la pantalla, en este menú, sale como 'activa' (resaltado y subrayado). 

// Ver como si se minimiza la pantalla, los enlaces no aparecen, no hemos añadido todavía el código para efecto responsivo 
// Hay que añadir los links en :     

<!-- Responsive Navigation Menu -->

// En esta zona del código vemos otro componente  
<x-responsive-nav-link ... > 
// que podemos inspeccionarlo en resources>views>components>responsive-nav-link.blade.php

// En navigation.blade.php en <!-- Responsive Navigation Menu --> 
// 	añadir el siguiente código, justo después de la entrada de Dashboard 

        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('postCRUD.index')" :active="request()->routeIs('postCRUD.index')">
                {{ __('Publicaciones') }}
            </x-responsive-nav-link>
        </div>

        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('categoryCRUD.index')" :active="request()->routeIs('categoryCRUD.index')">
                {{ __('Categorias') }}
            </x-responsive-nav-link>
        </div>

// Probarlo ahora forzando la responsividad. 
// Comprobar que el menú hamburguesa contiene la navegación 
http://<blog-app.test>/dashboard


///////////////////////////  CKEditor


//// Hagamos dos cosas 'especiales' 
//// Vamos a instalar el CKEditor (https://ckeditor.com/) que es un editor de texto en formato WYSIWYG que permite escribir contenido directamente dentro de 
//// las páginas web o aplicaciones en línea. Su código está escrito en JavaScript (es una librería JS) i está desarrollado por CKSource (https://cksource.com/)
//// Esto nos permitirá 'tratar' el texto, por ejemplo, el texto de las Publicaciones en el textarea, cuando las creamos / editamos, tener una herramienta
//// que nos permitan tratar el texto. 
//// El CKEditor no es el único que existe, se pueden poner otros 
//// Veámoslo:






////////////////////////////  RELACIONES


/////////  CREATE

// Veamos, cómo asignar Categorías a una Publicación 

http://blog-app.test/postCRUD/create 


// A una publicación cualquiera hay que poder asignarle una Category de las que tenemos. 
// Veamos cómo, y en general, veamos cómo poder gestionar las relaciones 1:N. 

// Editar el Controlador pertienente: app>Http>Controllers>PostControllerCRUD.php a la funcion create() 
// Este PostControllerCRUD está lleno de código comentado de las pruebas que hemos ido haciendo 
// Es buena idea copiarlo, para guardar los ejemplos, y tener un limpio 
// Una vez hecho backup del original, limpiar todo el código comentado 

// Añadimos el siguiente código en el método create(), para recuperar todas las Category, 
//  y recordar el import las class Category en el PostControllerCRUD.php

// Original 
    public function create()
    {
        
        return view('post.create'); // Llama a la vista create.blade.php que muestra el formulario de creación
    }

// Nuevo 
    public function create()
    {
        
        $categories = Category::all(); // Recuperamos las categorías para asignarlas en el create
        return view('post.create', ['categories' => $categories]); // Llama a la vista create.blade.php con Categories 
    }

// Y ahora, en la View resources>views>post>create.blade.php, que es donde lo recibiremos
//      primero lo probamos añadiendo un @dd() para verlo al inicio del código del formulario, justo antes del  <div class="py-12">


    </x-slot>

    @dd($categories);  // Para comprobar que se reciben las categories

    <div class="py-12">

http://blog-app.test/postCRUD/create 

 // Y deberían verse. 
      #attributes: array:7 [
        "id" => 1
        "title" => "Noves tecnologies"
        "url_clean" => "noves_tecnologies"
        "start_date" => null
        "end_date" => null
        "created_at" => "2024-09-12 13:04:34"
        "updated_at" => "2024-09-12 13:04:34"
      ]

// Así como está ahora, pasa toda la info que vemos con el @dd($categories);
// Recordar que podemos hacer que pase menos info, una info más simplificada con el 'pluck'
// Es bueno aplicarlo aquí para que sea más ágil, pensar que podría pasar mucha info
// El PostControllerCRUD.php, lo dejamos así 

    public function create()
    {
        
        //$categories = Category::all(); // Recuperamos las categorías para asignarlas en el create
        $categories = Category::pluck('id','title'); // Recuperamos las Category, solamente los campos que nos interesan 
        return view('post.create', ['categories' => $categories]); // Llama a la vista create.blade.php con Categories  
    }

// Comprobarlo otra vez 
http://blog-app.test/postCRUD/create 

// Ahora el @dd($categories); escupe una info mucho más escueta y lo que realmente necesitamos
Illuminate\Support\Collection {#1332 ▼ // resources\views/post/create.blade.php
  #items: array:8 [▼
    "Noves Tecnologies" => 1
    "Disseny personal" => 2
    "Il·lustracions" => 3
    "Art i cultura" => 4
    "TOMEU" => 6
    "HOLA QUE TAL" => 8
    "TOMMY" => 9
    "ABCDEF" => 10
  ]
  #escapeWhenCastingToString: false
}

// En el create.blade.php finalmente, borrar o comentar el  @dd($categories); 
// (Yo lo he tenido que borrar, no comenta bien y hace un desastre en el html) 

// Y ahora tendremos que añadir un desplegable de Categories.
// Añadir el siguiente código que nos renderiza el desplegable de Categories 

                        <div class="mb-3">
                            <label for="categories_id">Categories</label>
                            <select name="categories_id" class="mt-1 block w-full">
                            @foreach ($categories as $title => $id)
                                <option value="{{$id}}">{{$title}}</option>
                            @endforeach
                            </select>
                        </div> 

// Ya tenemos maquetada la página con un desplegable 1:N

// Ahora, hay que guardarlo, cuando creamos la publicación deberemos guardar también la Category seleccionada
// Para ello, acceder a PostControllerCRUD.php al método store() y observar como ahora mismo NO guardamos la Category 
// Ver como se guarda uno a uno los campos que llegan
// Para empezar, añadir un $post->category_id = $request->content; 
// Y ya que estamos podemos aprovechar y guardar también el Posted (yes / not)
//  y también eliminar el with('status','<h1>Publicación creada correctamente</h1>'); 
//  ya que si hay error lo mostrará, y si no, salta al index(), suponiendo se ha creado ok. 
/  También se podría hacer un orderBY en el index para mostrar inversamente por ID y nos 
//  mostraría el último creado. 
// Queda como sigue:

    public function store(GuardarPostRequest $request)
    {
       
        $post = new Post; 

        $post->title = $request->title;
        $post->url_clean = $request->url_clean;  
        $post->content = $request->content; 
        $post->posted = $request->posted; 
        $post->category_id = $request->categories_id; // Añade la FK de category
        $post->user_id = User::all()->random()->id; // Para que la FK user_id funcione, elegimos al azar

        $post->save(); 

        return redirect()->route('postCRUD.index'); 
    }

// Y vamos a probarlo, ahora mirando la DDBB todos tienen (uno aleatorio)
//	crear uno y comprobarlo directamente en la DDBB
http://example-app.test/postCRUD/create


// Si no renderiza bien, recordar generar las class de tailwindcss
λ npm run build // Genera el fichero de clases css, pero no rastrea cambios
λ npm run dev // Rastrea cambios y los aplica en dinámicamente

/////////  SHOW 


//// Vamos a ver cosas de las relaciones desde el punto de vista de Eloquent
// (https://laravel.com/docs/11.x/eloquent-relationships)
// Where o Join para cargar las Categorias de las publicaciones
// En app>Http>Controllers>PostControllerCRUD vamos a show()

// Y podríamos hacer lo siguiente
        // Obtenemos una categoria
        $cat = Category::where('id', $postCRUD->category_id); 

// Y luego pasarla, pero esto es hacerlo a pelo, 
// Eloquent nos deja desde el modelo (Post) poder acceder a las Category
// Vamos al app>Models>Post.php y ver que hay un método publico que se llama category()

    public function category() // 1 Post es de 1 Category
    {
      return $this->belongsTo(Category::class);  // N:1
    }

// Le estamos diciendo que tiene una relación belongsTo (un Post pertenece a una Category) 

// Revisado esto, vamos al resoruces>views>components>cards-post.blade.php 
// que es donde se renderizan las publicaciones creadas
// Llamo a este método para que me devuelva la Category y la mostramos en la View

        <h3 class="mb-2 text-xl font-medium leading-tight">{{ $post->category->title }}</h3>

// Ojo, puede generar un error si hay algún null en la DDBB 
//  en tal caso, añadiremos un condicional en el card-posts.blade.php para prevenir esta posibilidad

        @if ($post->category)
            <h3 class="mb-2 text-xl font-medium leading-tight">{{ $post->category->title }}</h3>
        @endif

// Ya ahora sí que funcionará correctamente en todos los casos


// Ejercicio: Hacer exáctamente lo mismo para user()
//  Recordar que el user, ahora mismo, se toma con una función aleatoria en el store()
//	lo que vamos haríamos es mostrarlo, en absoluto modificarlo o añadirlo en la creación
// Revisar en Model Posts el método user() y es lo mismo, se aplicaría la misma estrategia 
    public function user() 
    {
        //Relación Eloquent extracción User desde Post
        return $this->belongsTo(User::class); 
    }

// Ahora mismo, en card-posts.blade.php, añadir
        <p class="mb-4 text-sm">user: {{$post->user->name}}</p>


// Finalmente, la View card-posts.blade.php quedaría asi 

<div class="block rounded-lg bg-white shadow-secondary-1">
    <div class="p-6 text-surface">
        <h5 class="mb-2 text-xl font-medium leading-tight">{{ $post->title }}</h5>
        <h3 class="mb-2 text-xl font-medium leading-tight">{{ $post->url_clean }}</h3>
        @if ($post->category)
            <h3 class="mb-2 text-xl font-medium leading-tight">{{ $post->category->title }}</h3>
        @endif
        <p class="mb-4 text-base">{{ $post->content }}</p>
        <p class="mb-4 text-sm">user: {{$post->user->name}}</p>
        <p class="mb-4 text-sm">posted: {{ $post->posted }}</p>
        <p class="mb-4 text-sm">created at: {{ $post->created_at }}</p>
        <p class="mb-4 text-sm">updated at: {{ $post->updated_at }}</p>
        <a href="{{route('postCRUD.show' , ['postCRUD' => $post->id])}}" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Show</a>
        <a href="{{route('postCRUD.edit' , ['postCRUD' => $post->id ])}}" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Edit</a>
        <form action="{{route('postCRUD.destroy' , ['postCRUD' => $post->id ])}}" method="POST" class="float-right">
           @method('DELETE')
           @csrf
           <button type="submit" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Delete</button>
        </form>
    </div>
</div>

// Probar que ahora se muestra todo
http://blog-app.test/postCRUD


/////////  UPDATE

// Nota: No se actualizará el usuario de la Publicación 
//  por razones obvias, tampoco se actualizar el created_at o el updated_at

// Lo primero que hacemos es modificar el método edit() del PostControllerCRUD para que 
//  lea las Categories y las envíe a la View edit. 
//  Usamos el pluck de la misma manera que lo usamos en el create.
//  Recordar pasar las categories a la View  
// El método edit() queda de la siguiente manera:

    public function edit(Post $postCRUD)
    {
        $categories = Category::pluck('id','title'); // Recuperamos las categorías, solamente los campos que nos interesan 
        return view('post.edit',['post' => $postCRUD,'categories' => $categories]); // Hay que crear la vista edit
    }

// Ahora hay que modificar la View edit.blade.php
//	y añadir los campos Categories y Publicat para que sean Desplegables
// Observar que lo que hacemos es, al igual que el crete, mostrarlos con un @foreach, pero aquí
//  la diferencia está en que hay que determinar cuál es la categoría que ya tiene asignado el post 
//  para dejarlo seleccionado 

                        <div class="mb-3">
                            <label for="category_id">Categories</label>
                            <select name="category_id" class="mt-1 block w-full">
                                @foreach ($categories as $title => $id)
                                    @if ($post->category_id == $id)
                                        <option selected value="{{$id}}">{{$title}}</option>                                       
                                    @else
                                        <option value="{{$id}}">{{$title}}</option>  
                                    @endif
                                @endforeach
                            </select>
                        </div> 

// En el caso del posted, simplemente usamos un @if para pintar de una u otra manera
//  también se podría hacer con un control más sencillo (checked / Unckecked)

                        <div class="mb-3">
                            <label for="posted" class="form-label">Publicat</label>
                            <select name="posted" class="mt-1 block w-full">
                                @if ($post->posted == 'yes')
                                    <option selected value="yes">Si</option>
                                    <option value="not">No</option>
                                @else
                                    <option value="yes">Si</option>
                                    <option selected value="not">No</option>
                                @endif
                            </select>
                        </div>

// Finalmente modificar el Model Post
//	 añadiendo en $fillable los "category_id" y el "posted"

// Recordar que en el PostControllerCRUD en update() ahora tenemos una actualización masiva
    public function update(ActualizarPostRequest $request, Post $postCRUD)
    {

        $postCRUD-> update($request->all()); //Actualizamos el registro de la DDBB 
        return back(); // Vuelve a la página origen, y vuelve a cargar el registro actualizado
    }

// Porque en app>Models>Post.php habíamos definido lo siguiente
    protected $fillable = [
        'title',
        'url_clean',
        'content',
    ];

// Y no así en el store(), donde tenemos por separado cada uno de los campos porque el user_id es FK y lo tomamos como random()
// También se debería separar cada uno de los campos si fuera necesario un tratamiento, por ejemplo se almacena en la DDBB un 
//  valor diferente al que se lee (imaginemos almacenar 0/1 en la DDBB en lugar de yes, not, etc.) 

// Si deseamos hacer un guardado o actualizado masivo, como será el caso, hay que indicarlo en el fillable
// Lo dejamos de esta manera. 

    // Campos que son updatables de manera masiva
    protected $fillable = [
        'title',
        'url_clean',
        'content',
        'user_id',
        'category_id',
        'posted'
    ]; 

// Probarlo modificando algunas categorías de Publicaciones


//////////////////////////////////// Vamos a cerrar algunos temas pendientes que nos quedan

// 1.- Completar el Menú para tener acceso a la creación de elementos
// 2.- Ordernar la lista de elementos x fecha de creación
// 3.- Ordenar los campos de los elementos tal que haya una coherencia en Create / Edit / Update 
// 4.- Ajustar el número de carácteres en el textarea y controlarlo también mediante atributos html 
// 5.- Control de acceso mediante Middleware
// 6.- CKEditor
// 7.- Eliminación de Categories asociadas a un Post


// 1.- Completamos el Menú de opciones para que haya puntos de Menú para Crear Publicaciones y Categorías
// En la View de navigation.blade.php añadir lo siguiente (queda de la siguiente manera)

                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                        {{ __('Dashboard') }}
                    </x-nav-link>

                    <!-- Links para Publicaciones -->
                    <x-nav-link :href="route('postCRUD.index')" :active="request()->routeIs('postCRUD.index')">
                        {{ __('Publicaciones') }}
                    </x-nav-link>

                    <x-nav-link :href="route('postCRUD.create')" :active="request()->routeIs('postCRUD.create')">
                        {{ __('Publicación [Nueva]') }}
                    </x-nav-link>

                    <!-- Links para Categorias -->
                    <x-nav-link :href="route('categoryCRUD.index')" :active="request()->routeIs('categoryCRUD.index')">
                        {{ __('Categorias') }}
                    </x-nav-link>

                    <x-nav-link :href="route('categoryCRUD.create')" :active="request()->routeIs('categoryCRUD.create')">
                        {{ __('Categoría [Nueva]') }}
                    </x-nav-link>
                </div>
            </div>

// Recordar actualizar también los menú responsivos, quedarían de la siguiente manera:

            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                {{ __('Dashboard') }}
            </x-responsive-nav-link>

            <!-- Links Responsivos para Publicaciones -->
            <div class="pt-2 pb-3 space-y-1">
                <x-responsive-nav-link :href="route('postCRUD.index')" :active="request()->routeIs('postCRUD.index')">
                    {{ __('Publicaciones') }}
                </x-responsive-nav-link>
            </div>
            <div class="pt-2 pb-3 space-y-1">
                <x-responsive-nav-link :href="route('postCRUD.create')" :active="request()->routeIs('postCRUD.create')">
                    {{ __('Publicación [Nueva]') }}
                </x-responsive-nav-link>
            </div>
    
            <!-- Links Responsivos para Categorías -->
            <div class="pt-2 pb-3 space-y-1">
                <x-responsive-nav-link :href="route('categoryCRUD.index')" :active="request()->routeIs('categoryCRUD.index')">
                    {{ __('Categorias') }}
                </x-responsive-nav-link>
            </div>
            <div class="pt-2 pb-3 space-y-1">
                <x-responsive-nav-link :href="route('categoryCRUD.create')" :active="request()->routeIs('categoryCRUD.create')">
                    {{ __('Categoría [Nueva]') }}
                </x-responsive-nav-link>
            </div>

// 2.- Cuando se crea un nuevo elementos (Publicación o Categoría) saltamos a la lista de elementos
//  y hay que buscar el elemento nuevo, normalmente el último de la lista.
// Podemos mejorarlo haciendo que la lista de elmentos esté ordenada por fecha de creación (created_at)
//  de esta manera mostrará en primer lugar el último elemento creado 
// En el PostControllerCRUD y en el CategoryControllerCRUD modificar el método index() de la siguiente manera

    public function index()
    {

        $posts = Post::orderBy('created_at','DESC')->paginate(3); // Obtención publicaciones orden fecha creación y paginación
        return view('post.index',['posts' => $posts]);  // Llamada a la View pasando $posts en 'posts' para maquetar el resultado
    }

    public function index()
    {
        $categories = Category::orderBy('created_at','DESC')->paginate(3); // Obtención categorías orden fecha creación y paginación
        return view('category.index',['categories' => $categories]); // Los mostramos con la View 
    }

// 3.- Ordenamos los campos tal que se muestren de igual manera en el Index / Show / Edit / Create
// Aplicamos siguiente orden

$post->title
$post->url_clean
$post->category->title
$post->content
$post->user->name (Sólo en Index / Show)
$post->posted 
$post->created_at (Sólo en Index / Show)
$post->updated_at (Sólo en Index / Show)

// 4.- Aprovechamos y restringimos la cantidad de texto que se puede teclear en el textarea de las Publicaciones
//  recordar que ahora mismo tenemos una restricción de 255 que 'a priori' es un poco pequeña
//  la subimos a 500 carácters

// Primero en Requests>GuardarPostRequest y en Requests>ActualizarPostRequests

    public function rules(): array
    {
        return [
            ...
            'content' => 'required|min:5|max:500',
        ];
    }

    public function messages() {
        return [
            ...
            'content.min' => 'El content mínimo son 5 carateres',
            'content.max' => 'El content máximo son 500 caracters',
        ]; 
    }

// Luego en las View de post>create.blade.php y post>edit.blade.php
// Modificamos la textarea de la siguiente manera

                        <div class="mb-3">
                            <label for="content">Contingut</label>
                            <textarea name="content" minlength="5" maxlength="500" style="@error('content') border-color:RED; @enderror" rows="5" class="mt-1 block w-full"></textarea>
                            @error('content')
                                <div>{{$message}}</div>
                            @enderror
                        </div>


                        <div class="mb-3">
                            <label for="content">Content</label>
                            <textarea name="content" minlength="5" maxlength="500" style="@error('content') border-color:RED; @enderror" rows="5" class="mt-1 block w-full">{{$post->content}}</textarea>
                            @error('content')
                                <div>{{$message}}</div>
                            @enderror
                        </div>

// 5- Finalmente en el En el método de store() del PostControllerCRUD tenemos esto 
        $post->user_id = User::all()->random()->id; // Para que la FK user_id funcione, elegimos al azar

//  Que es una selección del usuario de la Publicación mediante una función aleatoria
//  tenemos que asignar el usuario correcto, para ello utilizaremos la autenticación (Middleware)


///////////////// MIDDLEWARE (Autenticación Usuarios)

// Ahora mismo tenemos Routes y podemos tener un Middleware (opcional) 
//  en las Routes antes de llamar al Controller
// El Middleware permite validaciones y control de acceso sobre cada una de las rutas. 
 
// Ahora mimo no está limitado el acceso a las url
// Si en situación de Log Out accedo por ejemplo a 
http://blog-app.test/postCRUD/

// Devuelve un error, porque no tiene a nadie logineado, impide el acceso pero por un error, no por lógica
// Hay que controlar esto, ahora no se consigue acceder a la url por un error, pero no porque se impida su acceso
// 	    Internal Server Error
// 	    Attempt to read property "name" on null

// Vamos a controlarlo mediante un Middlware a nivel de Routes. 
// recordar el routes>web.php, vemos los siguiente:
// (Se recomienda crear un web_copy.php y limpiar el web.php de código de ejemplo)

// Observamos lo siguiente 
Route::get('/dashboard', function () {
    return view('dashboard');
})->middleware(['auth', 'verified'])->name('dashboard');

// tal que, sin estar logineado, probar el 
http://blog-app.test/dashboard

// Te redirige a
http://blog-app.test/login


// Esto es exáctamente lo que queremos y lo controla el Middleware de autenticación
// Si se intenta acceder a alguna ruta, sin estar logineado, que se rediriga a la pantalla de login

// Hay diferentes maneras de obligar a estar logineado para crear una Publicación
// Podemos decirlo directamente en la route, como el ejemplo anterior, añadiendo
// ->middleware(['auth', 'verified'])->name('dashboard');

// Pero también podemos hacerlo agrupando Routes
// 	todas las Routes que se incluya dentro de esta función 
// 	serán Routes que por defecto tendrán en el middleware un 'auth'
// Como tenemos las Routes generadas de manera agrupada, es la manera ideal 

// Originalmente tenemos:
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

// Entonces, en web.php vamos a mover las rutas agrupadas del CRUD y ubicarlas dentro de esta función tal que queda así 
Route::middleware('auth')->group(function () {

    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');

    //////////////// Routes del CRUD
    Route::resource('/postCRUD', PostControllerCRUD::class); // Genera automáticamente todas las rutas para el controllador PostControllerCRUD
    Route::post('/posts/{post}/edit/images',[PostControllerCRUD::class, 'image'])->name('post.image'); // Para imágenes

});

// Hacer Log Out y probar ahora de acceder a algunas rutas
http://example-app.test/postCRUD/create 
http://example-app.test/postCRU

// Ahora te redirige al login automáticamente, el Middleware hace su trabajo. 
//  no nos permite acceder a una Route sin estar antes logineado

// Y ahora es cuando podremos redondear la función store() del PostController
// Ahora mismo tenemos esto en el PostControllerCRUD

    public function store(GuardarPostRequest $request)
    {
 	...
        $post->user_id = User::all()->random()->id; // Para que la FK funcione, elegimos aleatorio. 
	...
    }

// Y Ahora ya podremos ajustarlo de manera adecuada. 
// la funció store() queda de la siguiente manera:
// (Recordar importar la clase use Illuminate\Support\Facades\Auth;)
        $post->user_id = Auth::user()->id;  // Obtiene el usuario logineado 

// Así obligamos que el usuario logineado es el que se registra como usuario de creación de la Publicación
// Hacer una prueba creando algunos Post. 
// En el listado de publicaciones, ya debería visualizarse la publicación del usuario logineado 


/////////////////////////////////////// Instalación del  CKEditor para el Backoffice

// La configuración del CKEditor requiere de una licencia de usuario 
// La licencia gratuíta (de desarrollo) se obtiene a partir del registros
//  el alumno deberá registrarse en https://ckeditor.com/ utilizando su correo educativo (@iesemilidarder.com)


// Se instala y configura el CKEditor mediante la opción CDN 
//  hasta el momento, no hemos conseguido hacerlo funcionar mediante la opción Self-hosted (npm/ZIP)
// La opción CDN se ha conseguido gracias a los alumnos de 2 DAW curso 24/25 (mención especial a Antonio Martínez Mateo)
// Se puede obtener la documentación oficial de la instalación en :
// https://ckeditor.com/docs/ckeditor5/latest/getting-started/index.html


// Se procederá de la siguiente manera
// CKEditor require de los siguientes scripts y stylesheet, 
//  por lo que se ha optado por incluirlos en resources>views>layout>app.blade.php que es el layout 
//  de nivel superior (el que incluye <!DOCTYPE html>) que utilizamos por defecto para renderizar todas nuestras View. 
// Dentro de <head> </head> se añaden los scripts y stylesheet del CKEditor "normal" sin "premium features" 
/   sin las "premium features" porque suponemos que nuestra licencia no los soporta.

    <head>
        ...
        <!-- CKEditor -->
        <link rel="stylesheet" href="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.css" />
        <script src="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.umd.js"></script>
        ...
    </head>


// Seguidamente, accedemos a las View donde deseamos que aparezcan campos con las herramientas que 
// proporciona el CKEditor, en nuestro caso serían las siguientes View
// resources>views>post>create.blade.php y resources>views>post>edit.blade.php 

// En create.blade.php se modifica el textarea de la siguiente manera:
// Nota, se elmina el atributo "rows" el CKEditor toma el control del tamaño (lo convierte en dinámico)
// Nota, recordar añadir el id="editor" o identificación que hemos elegido para renderizarlo 

        <div class="mb-3">
            <label for="content">Contingut</label>
            <textarea id="editor" name="content" minlength="5" maxlength="500" style="@error('content') border-color:RED; @enderror" class="mt-1 block w-full"></textarea>
            @error('content')
                <div>{{$message}}</div>
            @enderror
        </div>

// Y el siguiente script a pié de la View, entre el último </div> y el </x-app-layout>
// Nota, en licenseKey: 'licencia', el valor 'licencia' se substituirá por la propia

    <!-- Script para CKEditor -->
    <script>
        const {
            ClassicEditor,
            Essentials,
            Bold,
            Italic,
            Font,
            Paragraph
        } = CKEDITOR;

        ClassicEditor
            .create( document.querySelector( '#editor' ), {
                licenseKey: 'licencia',
                plugins: [ Essentials, Bold, Italic, Font, Paragraph],
                toolbar: [
                    'undo', 'redo', '|', 'bold', 'italic', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|'
                ]
            } )
            .then( /* ... */ )
            .catch( /* ... */ );
    </script>

</x-app-layout>

// De manera similar para la resources>views>post>edit.blade.php 

// Para que se pueda visualizar correctamente este campo en la lista de elementos
//  se deberá utilizar la fórmula {!! !!} en resources>views>components>card-posts.blade.php
//  de esta manera se renderizan las tag en lugar de mostrarse

        <p class="mb-4 text-base">{!! $post->content !!}</p>

// Nota: si se ha usado un Factory para rellenar con ejemplos esta información
//  se deberá revisar manualmente, es posible que haya tags de formularios y otros
//  que rompan la correcta visualización

///////////////////////////////////////  FIN CKEditor BackOffice

// 7.- Eliminación de Categories asociadas a un Post
// Laravel ofrece otras funcionalidades además de las ya vistas
//  por ejemplo facilidades para importar imágenes en la DDBB, tests, despliege a producción, etc
// No obstante, para la correcta programación del BaleArt, se considera que las funcionalidades y facilidades vistas son suficientes
//  aunque queda un último detalle. 
// Si intentamos eliminar una Category asociada a un Post, genera un error incontrolado de DDBB

// Crear un Post asociándolo a una de las Category existentes. 
// Proceder a la eliminación de la Category, se obtendrá un error de "Integrity constraint violation"
//  ya que se intenta eliminar una Category cuyo ID forma parte de un Post como Foreign Key
// Existen varias maneras de controlarlo, una de ellas es mediante la definición de un Delete Cascade a nivel de DDBB
//  aún siendo posible, aquí se descarta esta técnica por ser muy agresiva con la DDBB, y se opta por bloquear
//  la eliminación de la Category si forma parte de algún Post


// Se modificara del CategoryControllerCRUD el método  public function destroy(Category $categoryCRUD)  de la siguiente manera:
//  Inicialmente, se comprueba si existe algún Post con un category_id igual al que se desea eliminar
//      Si existe, entonces se impide su eleminación y se muestra un mensaje informando de este hecho
//      Si no existe, entonces si se elimina y también se muestra un mensaje de confirmación de borrado

 public function destroy(Category $categoryCRUD) 
    {
        // Eliminación del recurso
        $post = Post::where('category_id','=',$categoryCRUD->id)->count(); // Corroborar que no es una FK en Post

        // Si existe algún Post con el category_id a borrar no lo borramos y mostramos un mensaje
        // Si no exite ningún Post con el catetgory_id a borrar entonces sí que lo borramos 
        if($post) {
            return back()->with('status','No es posible eliminar la Categoría');
        } else {
            $categoryCRUD->delete(); 
            return back()->with('status','Categoría eliminada correctamente');
        }

// Modificamos ahora la View index.blade.php de Category para mostra los mensajes
// Quedará de la siguiente manera. 

<!-- Listado de Categories -->
<div class="py-12">
    <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
        <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
            <div class="p-6 text-gray-900">
                
                <!-- Comprobamos si tenemos que mostrar un mensaje de status -->
                <!-- el if es necesario puesto que la primera vez no tendremos status -->
                @if (session('status'))
                    <div class="p-4 mb-4 text-sm text-yellow-800 rounded-lg bg-yellow-50 dark:bg-gray-800 dark:text-yellow-300" role="alert">
                        <span class="font-medium">{{ session('status') }}</span>
                    </div>
                @endif

                <!-- Se muestran los elementos en forma de Card -->
                @each('components.card-categories',$categories,'category') <!-- Listado de Categorías -->
                {{ $categories->links() }} <!-- Paginación -->

            </div>
        </div>
    </div>
</div>

// Nota: Ahora podemos modificar el método public function store(GuardarCategoryRequest $request) 
//  para mostrar un menaje de creación correcta. 

        return redirect()->route('categoryCRUD.index')->with('status','Categoría creada correctamente'); 

// Probarlo intentando borrar categorias que forman parte de publicaciones y otras que no. 
// recordar lanzar un npm run build ya que los mensajes tienen algunas class no usadas anterioremente

// Ejercicio: Aprovechar el mensaje añadido a la vies index.blade.php para añadir los siguiente mensaje
//  en public function store(GuardarCategoryRequest $request)

        return redirect()->route('categoryCRUD.index')->with('status','Categoría creada correctamente'); // Salta a View index con mensaje

// Ejercicio: Aplicar la misma estrategia de mensajes para los métodos store() y destroy() del PostControllerCRUD 

        return redirect()->route('postCRUD.index')->with('status','Publicación creada correctamente'); 
        return back()->with('status', 'Publicación eliminada correctamente');

// Obviamente, antes se debe añadir el código html en la View index.blade.php del listado de Posts
//  de manera similar a cómo lo hemos hecho para Categorías 

 <!-- Listado de Posts -->
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">

                    <!-- Comprobamos si tenemos que mostrar un mensaje de status -->
                    <!-- el if es necesario puesto que la primera vez no tendremos status -->
                    @if (session('status'))
                        <div class="p-4 mb-4 text-sm text-yellow-800 rounded-lg bg-yellow-50 dark:bg-gray-800 dark:text-yellow-300" role="alert">
                            <span class="font-medium">{{ session('status') }}</span>
                        </div>
                    @endif

                    <!-- Se muestran los elementos en forma de Card -->
                    @each('components.card-posts',$posts,'post')
                    {{ $posts->links() }} <!-- Paginación -->

                </div>
            </div>
        </div>
    </div>

    ********************* Fin del tema Historial de Comandos Tutorial V
